name: Deploy Refinement Service to Phala Cloud

on:
  # This trigger runs after the 'Build and Publish Docker Images' workflow completes successfully.
  workflow_run:
    workflows: ["Build and Publish Docker Images"]
    types:
      - completed
    branches:
      - main
      - dev

  # This trigger allows to run the deployment manually from the Actions tab.
  workflow_dispatch:
    inputs:
      image_tag:
        description: 'Docker image tag to deploy'
        required: false
      environment:
        description: 'Override deployment environment'
        required: true
        type: choice
        options:
          - mainnet
          - moksha
        default: 'moksha'
      vm_name:
        description: 'Optional: Override the VM name in Phala Cloud'
        required: false

jobs:
  # This job determines which environment (mainnet/moksha) and Docker tag to use.
  prepare-deployment:
    runs-on: ubuntu-latest
    outputs:
      environment_name: ${{ steps.set-env.outputs.environment_name }}
      image_tag: ${{ steps.set-tag.outputs.image_tag }}
      compose_file: ${{ steps.set-env.outputs.compose_file }}
      phala_image: ${{ steps.set-env.outputs.phala_image }}
      vm_name: ${{ steps.set-env.outputs.vm_name }}
    steps:
      - name: Determine Environment and VM Name
        id: set-env
        run: |
          # Priority: Manual dispatch > Triggering branch > Current branch
          if [ "${{ github.event.inputs.environment }}" != "" ]; then
            ENV_NAME="${{ github.event.inputs.environment }}"
          elif [ "${{ github.event.workflow_run.head_branch }}" == "main" ]; then
            ENV_NAME="mainnet"
          else
            ENV_NAME="moksha"
          fi
          
          echo "Deployment environment set to: $ENV_NAME"
          echo "environment_name=$ENV_NAME" >> $GITHUB_OUTPUT
          
          # Set environment-specific files and default VM name
          if [ "$ENV_NAME" == "mainnet" ]; then
            echo "compose_file=docker-compose.phala.yml" >> $GITHUB_OUTPUT
            echo "phala_image=dstack-0.3.5" >> $GITHUB_OUTPUT
            echo "vm_name=${{ github.event.inputs.vm_name || 'mainnet-refiner-1' }}" >> $GITHUB_OUTPUT
          else
            echo "compose_file=docker-compose.phala.dev.yml" >> $GITHUB_OUTPUT
            echo "phala_image=dstack-dev-0.3.5" >> $GITHUB_OUTPUT
            echo "vm_name=${{ github.event.inputs.vm_name || 'moksha-refiner-1' }}" >> $GITHUB_OUTPUT
          fi

      - name: Determine Docker Image Tag
        id: set-tag
        run: |
          # Priority: Manual dispatch > Triggering workflow SHA > Current SHA
          if [ "${{ github.event.inputs.image_tag }}" != "" ]; then
            TAG="${{ github.event.inputs.image_tag }}"
          elif [ "${{ github.event_name }}" == "workflow_run" ]; then
            BRANCH_PREFIX=$([ "${{ steps.set-env.outputs.environment_name }}" == "mainnet" ] && echo "main" || echo "dev")
            TAG="$BRANCH_PREFIX-${{ github.event.workflow_run.head_sha }}"
          else
            # Fallback for direct pushes, though workflow_run is primary
            BRANCH_PREFIX=$([ "${{ steps.set-env.outputs.environment_name }}" == "mainnet" ] && echo "main" || echo "dev")
            TAG="$BRANCH_PREFIX-${{ github.sha }}"
          fi
          
          echo "Using Docker image tag: $TAG"
          echo "image_tag=$TAG" >> $GITHUB_OUTPUT

  # This job runs the actual deployment using the reusable action.
  deploy:
    needs: prepare-deployment
    runs-on: ubuntu-latest
    environment: ${{ needs.prepare-deployment.outputs.environment_name }}
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          # Ensure we check out the correct commit that triggered the build
          ref: ${{ github.event.workflow_run.head_sha || github.sha }}

      - name: Fetch Doppler Secrets
        uses: dopplerhq/secrets-fetch-action@v1.3.0
        with:
          doppler-token: ${{ secrets.DOPPLER_SERVICE_ACCOUNT_API_TOKEN }}
          # The environment name from the previous job determines which Doppler config to use
          doppler-config: ${{ needs.prepare-deployment.outputs.environment_name }}
          # Expose Doppler secrets as environment variables for the next step
          inject-env-vars: true

      - name: Deploy to Phala Cloud
        id: phala-deploy
        uses: vana-com/phala-deployment-action@v1
        with:
          phala-cloud-api-key: ${{ secrets.PHALA_CLOUD_API_KEY }}
          vm-name: ${{ needs.prepare-deployment.outputs.vm_name }}
          vm-id: ${{ env.PHALA_VM_ID }} # Use VM_ID from Doppler if it exists
          image: ${{ needs.prepare-deployment.outputs.phala_image }}
          docker-compose-file: ${{ needs.prepare-deployment.outputs.compose_file }}
          docker-tag: ${{ needs.prepare-deployment.outputs.image_tag }}
          prelaunch-script-file: 'prelaunch.sh'
          # List of the final variable names to be encrypted
          env-vars-to-encrypt: |
            [
              "ADMIN_WALLET_WHITELIST",
              "CHAIN_NETWORK",
              "CHAIN_NETWORK_ENDPOINT",
              "HOTKEY_MNEMONIC",
              "QUERY_ENGINE_ACCOUNT",
              "DOZZLA_USERS",
              "SSH_USERNAME",
              "SSH_PASSWORD"
            ]
        env:
          # This 'env' block securely provides the secret values to the action step.
          # The names here MUST match the names in the list above.
          # These values come from the Doppler 'secrets-fetch-action' step.
          ADMIN_WALLET_WHITELIST: ${{ env.ADMIN_WALLET_WHITELIST }}
          CHAIN_NETWORK: ${{ env.CHAIN_NETWORK }}
          CHAIN_NETWORK_ENDPOINT: ${{ env.CHAIN_NETWORK_ENDPOINT }}
          HOTKEY_MNEMONIC: ${{ env.HOTKEY_MNEMONIC }}
          QUERY_ENGINE_ACCOUNT: ${{ env.QUERY_ENGINE_ACCOUNT }}
          DOZZLA_USERS: ${{ env.DOZZLA_USERS }}
          SSH_USERNAME: ${{ env.SSH_USERNAME }}
          SSH_PASSWORD: ${{ env.SSH_PASSWORD }}

      - name: Post Deployment Summary
        if: always() # Always run this step to provide feedback
        run: |
          echo "## Phala Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Status:** ${{ steps.phala-deploy.outputs.status }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment:** ${{ needs.prepare-deployment.outputs.environment_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **CVM Name:** ${{ steps.phala-deploy.outputs.vm-name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **CVM ID:** ${{ steps.phala-deploy.outputs.vm-id }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Docker Tag:** `${{ needs.prepare-deployment.outputs.image_tag }}`" >> $GITHUB_STEP_SUMMARY

          if [[ "${{ steps.phala-deploy.outputs.status }}" != "success" ]]; then
            echo "Deployment failed. Please review the workflow logs for details."
            exit 1
          fi